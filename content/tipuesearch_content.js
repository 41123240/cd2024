var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁:  https://41123240.github.io/cd2024/ \n 網誌:\xa0 https://41123240.github.io/cd2024/blog \n 簡報: \xa0 https://41123240.github.io/cd2024/reveal \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n', 'tags': '', 'url': 'Brython.html'}, {'title': 'LaTex-w3作業', 'text': '檔案 \n', 'tags': '', 'url': 'LaTex-w3作業.html'}, {'title': 'w5上字幕作業', 'text': '\n \n 第五部影片逐字稿.txt \n 第六部影片逐字稿.txt \n 心得： 這兩部影片在描述使用github建立群組倉儲的過程，並且適用可攜程式來維護我們的倉儲，這樣可以提供良好的隔離性和安全性，從而保護我們的開發環境不受外部干擾，也可以確保各個組員都可以對倉儲進行維護與更新，使分工更加明確。 \n', 'tags': '', 'url': 'w5上字幕作業.html'}, {'title': '期中影片', 'text': '\n', 'tags': '', 'url': '期中影片.html'}, {'title': 'W10協同網站作業', 'text': '建立群組協同網站並處理 \n from browser import window, ajax\n\ndef fetch_csv_data():\nurl = "https://mdecd2024.github.io/2bstud-2bsite/downloads/2b.txt"\n\ndef on_complete(req):\nif req.status == 200 or req.status == 0:\ncontent = req.text\nlines = content.split(\'\\n\')\nfor line in lines:\nif line.strip() == "":\ncontinue\nitems = line.split(\',\')\nif len(items) >= 3:\ngithub_username_1 = items[1].strip() # 第二個逗號後到第三個逗號前的數據\nteam = items[2].strip() # 第三個逗號後的數據\nteam2 = items[2].strip()\ngithub_url_1 = f"個人倉儲:https://github.com/{github_username_1}/cd2024"\nteam = f"分組倉儲:https://github.com/mdecd2024/2b-midbg{team}"\nteam2 = f"分組網頁:https://mdecd2024.github.io/2b-midbg{team2}"\ncsv_data = items[1].strip() # 取得 CSV 中第三個逗號後的資料\ngithub_io_url = f"個人網頁:https://{csv_data}.github.io/cd2024/"\nline_with_urls = f"{line.strip()},{github_url_1},{github_io_url},{team},{team2}" # 以逗號分隔的資料串\nprint(line_with_urls)\nelse:\nprint("Error:", req.text)\n\nreq = ajax.ajax()\nreq.bind(\'complete\', on_complete)\nreq.open(\'GET\', url, True)\nreq.set_header(\'content-type\', \'application/x-www-form-urlencoded\')\nreq.send()\n\nfetch_csv_data() \n', 'tags': '', 'url': 'W10協同網站作業.html'}, {'title': 'W12繪製NX OPEN作業', 'text': '圖檔 \n \n NX圖檔-4 \n \n 繪製過程 \n \n \n \n', 'tags': '', 'url': 'W12繪製NX OPEN作業.html'}, {'title': 'W13足球機器人場景模擬', 'text': '這週延續上週未完成的作業，上週繪製nx open圖，花費的時間比較多，這週只要照著老師步驟開啟檔案，先下載該組當時的倉儲資料, 並參考網際手足球機器人場景設計專案報告, 讓同學分別擔任場上球員, 再利用鍵盤跨操控足球機器人進行比賽，只要照著老師打的內容來開啟檔案，一步一腳印，這項作業不會消耗太多時間，開啟後他會自己比賽，我放著模擬到大比分。 \n \n \n \n \n \n', 'tags': '', 'url': 'W13足球機器人場景模擬.html'}, {'title': 'w17', 'text': '項目一 \n \n \n \n 零件圖檔案 \n \n 項目二 \n \n \n \n 組合圖檔案 \n 項目三 \n \n python程式碼檔案 \xa0\xa0 場景檔案', 'tags': '', 'url': 'w17.html'}]};